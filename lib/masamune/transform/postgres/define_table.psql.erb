--  The MIT License (MIT)
--
--  Copyright (c) 2014-2016, VMware, Inc. All Rights Reserved.
--
--  Permission is hereby granted, free of charge, to any person obtaining a copy
--  of this software and associated documentation files (the "Software"), to deal
--  in the Software without restriction, including without limitation the rights
--  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
--  copies of the Software, and to permit persons to whom the Software is
--  furnished to do so, subject to the following conditions:
--
--  The above copyright notice and this permission notice shall be included in
--  all copies or substantial portions of the Software.
--
--  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
--  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
--  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
--  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
--  THE SOFTWARE.

<%
  files ||= []
%>

<%- if helper.define_types? %>
<%- target.enum_columns.each do |_, column| -%>
DO $$ BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_type t WHERE LOWER(t.typname) = LOWER('<%= column.sql_type %>')) THEN
CREATE TYPE <%= column.sql_type %> AS ENUM (<%= column.values.map { |value| "'#{value}'" }.join(', ') %>);
END IF; END $$;
<%- end -%>
<%- end -%>

<%- if helper.define_sequences? %>
<%- target.sequence_columns.each do |_, column| -%>
DO $$ BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_class c WHERE c.relname = '<%= column.sequence_id %>') THEN
CREATE SEQUENCE <%= column.sequence_id %>;
ALTER SEQUENCE <%= column.sequence_id %> RESTART <%= column.sequence_offset %>;
END IF; END $$;
<%- end -%>
<%- end -%>

<%- if helper.define_tables? %>
<%- if target.temporary? -%>
CREATE TEMPORARY TABLE IF NOT EXISTS <%= target.name %>
<%- else -%>
CREATE TABLE IF NOT EXISTS <%= target.name %>
<%- end -%>
(
  <%- target.defined_columns.each do |column, last| -%>
  <%= column.as_psql %><%= ',' unless last %>
  <%- end -%>
);
<%- end -%>

<%- if helper.define_primary_keys? %>
DO $$ BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_class c WHERE c.relname = '<%= target.name %>_pkey') THEN
ALTER TABLE <%= target.name %> ADD PRIMARY KEY (<%= target.primary_keys.map(&:name).join(', ') %>);
END IF; END $$;
<%- end -%>

<%- if helper.define_foreign_keys? -%>
<%= render 'define_foreign_key.psql.erb', target: target %>
<%- end -%>

<%- if helper.define_sequences? -%>
<%- target.sequence_columns.each do |_, column| -%>
DO $$ BEGIN
IF NOT EXISTS (SELECT 1 WHERE sequence_owner('<%= column.sequence_id %>') = '<%= column.qualified_name %>') THEN
ALTER SEQUENCE <%= column.sequence_id %> OWNED BY <%= column.qualified_name %>;
END IF; END $$;
<%- end -%>
<%- end -%>

<%- if helper.load_files? -%>
<%- files.each do |file| -%>
<%-
  copy_options = []
  copy_options << "FORMAT 'csv'" if target.store.format == :csv
  copy_options << "DELIMITER '\t'" if target.store.format == :tsv
  copy_options << "HEADER true" if target.store.headers
-%>
\COPY <%= target.name %> FROM '<%= file %>' WITH (<%= copy_options.join(", ") %>);
<%- end -%>
<%- end -%>

<%- if helper.define_inheritance? -%>
<%= render 'define_inheritance.psql.erb', target: target %>
<%- end -%>

<%- if helper.define_unique_constraints? -%>
<%= render 'define_unique.psql.erb', target: target %>
<%- end -%>

<%- if helper.define_indexes? -%>
<%= render 'define_index.psql.erb', target: target %>
<%- end -%>

<%- if helper.insert_rows? -%>
<% target.insert_rows.each do |row| %>
INSERT INTO <%= target.name %> (<%= row.insert_columns.join(', ') %>)
SELECT <%= row.insert_values.join(', ') %>
WHERE NOT EXISTS (SELECT 1 FROM <%= target.name %> WHERE <%= row.insert_constraints.join(' AND ') %>);
<%- end -%>
<%- end -%>

<%- if helper.perform_analyze? -%>
ANALYZE <%= target.name %>;
<%- end -%>

<%- if helper.define_functions? -%>
<% target.aliased_rows.each do |row| %>
<%- row.natural_keys.each do |column| -%>
CREATE OR REPLACE FUNCTION <%= row.name(column) %>
RETURNS <%= column.sql_type %> IMMUTABLE AS $$
  SELECT CAST(<%= row.sql_value(column) %> AS <%= column.sql_type %>);
$$ LANGUAGE SQL;

<%- end -%>

CREATE OR REPLACE FUNCTION <%= row.name %>
RETURNS <%= target.surrogate_key.sql_type %> IMMUTABLE AS $$
  SELECT <%= target.surrogate_key.name %> FROM <%= target.name %> WHERE <%= row.insert_constraints.join(' AND ') %>;
$$ LANGUAGE SQL;

<%- end -%>
<%- end -%>
